#pragma kernel GrasshopperMain


#define STATE_SPAWN 0
#define STATE_IDLE 6
#define STATE_HOP_PREP 5
#define STATE_HOP 4
#define STATE_BUBBLECAPTURED 3
#define STATE_VANQUISHED 999
#define STATE_HEADSCRATCH 2

#define ANIM_SCRATCHHEAD 2
#define ANIM_SPIN 3
#define ANIM_JUMP 4
#define ANIM_JUMPPREPARE 5
#define ANIM_IDLE 6 

#define ANIMFRAMESTART 0.025
#define ANIMFRAMEEND 0.975

#define RAD2DEG 57.2957795131
#define DEG2RAD 0.0174532924
#define JUMPPREPTIME 0.25
#define JUMPSPEED 10
#define SPEED 3
#define GRAVITY 15.8
#define CAPTURERADMULTIPLIER 3
#define JUMPWAITTIME 1.75

// Each #kernel tells which function to compile; you can have many kernels
// #pragma dynamic_branch STATE_IDLE STATE_HOP_PREP STATE_HOP STATE_BUBBLECAPTURED STATE_VANQUISHED

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Grasshopper
{
    float3 position;
    float3 color;
    float scale;
    float direction;
    float spinDirection;
    float radians;          // reuse variables to save space
    float forwardVelocity; // init x 
    float upwardVelocity; // init y
    float jumpWaitTime; // init z
    float temp;
    int state;
    float timer;
    int bubbleParent;
    int seed;
    float frame;
};

struct Bubble
{
    float3 position;
    float3 delta;
    float3 velocity;
    float lifeTick;
    float lifeTime;
    int seed;
    float radius;
    float scale;
};
//===Libraries===

//===Structured buffers===
RWStructuredBuffer<Grasshopper> grasshoppers;
RWStructuredBuffer<Bubble> bubbles;
RWStructuredBuffer<float4> mapTexture;


//===Structured instance buffers===

// RWStructuredBuffer<float> _Rotations;

float4 _color1;
float4 _color2;
float _variance;

//===Map data===
float boundX;
float boundY;
float mapX;
float mapY;
float worldSize;
float ratio;

//===Bubble data===
int bubbleLength;
//===Player data===
float playerPosX;
float playerPosY;
float playerPosZ;
//===Misc. data===
float deltaTime;

sampler2D map;

int density;

float elapsedTime;

float AnimIncrementLoop(float time,float deltaTime)
{
    time += deltaTime;
    if(time > ANIMFRAMEEND)
    {
        time = ANIMFRAMESTART;
    }
    return time;
}
float AnimIncrementNoLoop(float time,float deltaTime)
{
    time += deltaTime;
    if(time > ANIMFRAMEEND)
    {
        time = ANIMFRAMEEND;
    }
    return time;
}

float3 rgb2hsv(float3 rgb)
{
    float maxComponent = max(rgb.r, max(rgb.g, rgb.b));
    float minComponent = min(rgb.r, min(rgb.g, rgb.b));
    float diff = maxComponent - minComponent;
    float hue = 0;
    if(maxComponent == rgb.r) {
        hue = 0+(rgb.g-rgb.b)/diff;
    } else if(maxComponent == rgb.g) {
        hue = 2+(rgb.b-rgb.r)/diff;
    } else if(maxComponent == rgb.b) {
        hue = 4+(rgb.r-rgb.g)/diff;
    }
    hue = frac(hue / 6);
    float saturation = diff / maxComponent;
    float value = maxComponent;
    return float3(hue, saturation, value);
}
float3 hue2rgb(float hue) {
    hue = frac(hue); //only use fractional part
    float r = abs(hue * 6 - 3) - 1; //red
    float g = 2 - abs(hue * 6 - 2); //green
    float b = 2 - abs(hue * 6 - 4); //blue
    float3 rgb = float3(r,g,b); //combine components
    rgb = saturate(rgb); //clamp between 0 and 1
    return rgb;
}

float3 hsv2rgb(float3 hsv)
{
    float3 rgb = hue2rgb(hsv.x); //apply hue
    rgb = lerp(1, rgb, hsv.y); //apply saturation
    rgb = rgb * hsv.z; //apply value
    return rgb;
}
float Rand(float st)
{
    return frac(sin(dot(st, float2(12.9898,78.233))) * 43758.5453123);
}

float RandomRange(float min, float max, float seed)
{
    return lerp(min, max, Rand(seed));
}
float EaseOutCubic(float x)
{
    return 1 - pow(1 - x, 3);
}
float2 GetDimensions()
{
    float mapWidth = mapX;
    float mapHeight =  mapY;
    return mapWidth > mapHeight ? float2(worldSize / ratio,worldSize) : float2(worldSize,worldSize * ratio);  
}
float SampleDimensions(float x, float y)
{
    float2 dimensions = GetDimensions();
    float centerFactorX = (dimensions.x / 2);//
    float centerFactorY = (dimensions.y / 2);//
    float gapSizeX = dimensions.x / density; //
    float gapSizeY = dimensions.y / density; //Can probably cache these

    // float newX = (x * gapSizeX) + centerFactorX;
    // float newY = (y * gapSizeY) + centerFactorY;
    float newY = (x / (dimensions.x )) + 0.5f; 
    float newX = (y / (-dimensions.y )) + 0.5f;

    
    // Debug.Log($"X:{newX}/Y:{newY}");


    float u = x / density; 
    float v = 1 - y / density;
    float4 test = tex2Dlod(map,float4(newX,newY,u,v));
    return test.w * 10;
}
float3 GetRandomColor(float3 color,float variance,float seed)
{
    float3 hsvColor = rgb2hsv(color);
    // float range = RandomRange(0,variance,seed);
    float range = RandomRange(-variance,variance,seed);
    
    hsvColor.x += range;
    return hsv2rgb(hsvColor);
}

float3 RandomColorBlend(float4 color1,float4 color2,float variance,float seed)
{
    float3 color1HSV = rgb2hsv(color1.xyz);
    float3 color2HSV = rgb2hsv(color2.xyz);
    float h = RandomRange(color1HSV.x,color2HSV.x,seed);
    float s = RandomRange(color1HSV.y,color2HSV.y,seed);
    float v = RandomRange(color1HSV.z,color2HSV.z,seed);
    float3 rgbColor = hsv2rgb(float3(h,s,v));
    rgbColor = GetRandomColor(rgbColor,variance,seed);
    return rgbColor;
}


[numthreads(10,1,1)]
void GrasshopperMain (uint3 id : SV_DispatchThreadID)
{
    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    Grasshopper grasshopper = grasshoppers[id.x];

    float3 playerPosition = float3(playerPosX,playerPosY,playerPosZ);

    // grasshopper.position.y += 1 * deltaTime;
 
    // grasshopper.position = float3(0,0,0);

    float ground = SampleDimensions(grasshopper.position.x,grasshopper.position.z);
    // float ground = 0;
    // deltaTime *= 0.5;

    [branch] switch (grasshopper.state)
    {
        case STATE_SPAWN:
            grasshopper.position.y = ground;
            grasshopper.seed = RandomRange(0,1000000,grasshopper.position.x + grasshopper.position.z - grasshopper.position.y);
            grasshopper.color = RandomColorBlend(_color1,_color2,_variance,grasshopper.seed);
            // grasshopper.color = GetRandomColor(_color1.xyz,_variance,grasshopper.seed);
            grasshopper.state = STATE_IDLE;
        break;
        case STATE_IDLE:

            // grasshopper.color = float3(1,1,0);
            grasshopper.frame = AnimIncrementLoop(grasshopper.frame,deltaTime);

            if(grasshopper.forwardVelocity > 0)
            {
                grasshopper.forwardVelocity -= deltaTime;
                grasshopper.jumpWaitTime = RandomRange(0.0,JUMPWAITTIME,grasshopper.seed);
            }
            else
            {
                grasshopper.forwardVelocity = 0;
            }
            
            grasshopper.timer += deltaTime;

            if(distance(playerPosition,grasshopper.position) < 10)
            {
                // grasshopper.direction = float3.Angle(playerPos,grasshopper.position) + 180;
                float3 directionToPlayer = playerPosition - grasshopper.position;
                float angleToPlayer = atan2(directionToPlayer.z, directionToPlayer.x) * RAD2DEG;
                grasshopper.direction = angleToPlayer + 180;
                grasshopper.timer = 0;
                grasshopper.state = STATE_HOP_PREP;
                break;
            }
            if(grasshopper.timer > grasshopper.jumpWaitTime)
            {
                float randomScratchChance = RandomRange(0,100,grasshopper.seed + grasshopper.position.x);
                grasshopper.direction = RandomRange(0,360,deltaTime);
                // grasshopper.direction = 200;
                grasshopper.timer = 0;
                grasshopper.frame = ANIMFRAMESTART;
                if(randomScratchChance > 50)
                {
                    grasshopper.state = STATE_HEADSCRATCH;
                }
                else
                {
                    grasshopper.state = STATE_HOP_PREP;
                }
            }
            for (int b = 0; b < bubbleLength; b++)
            {
                float radius = bubbles[b].radius * CAPTURERADMULTIPLIER;
                if(distance(bubbles[b].position,grasshopper.position) < radius)
                {
                    grasshopper.bubbleParent = b;
                    grasshopper.timer = 0;  
                    grasshopper.forwardVelocity = grasshopper.position.x; //
                    grasshopper.upwardVelocity = grasshopper.position.y; //
                    grasshopper.jumpWaitTime = grasshopper.position.z; // reuse these values for our original position before capture so we can lerp
                    grasshopper.temp = 0;
                    grasshopper.state = STATE_BUBBLECAPTURED;  
                }
            }
            if (grasshopper.position.x < -boundX) 
            {
                grasshopper.position.x = -boundX;
            }
            else if (grasshopper.position.x > boundX) 
            {
                grasshopper.position.x = boundX;
            }
            if (grasshopper.position.z < -boundY) 
            {
                grasshopper.position.z = -boundY;
            }
            else if (grasshopper.position.z > boundY) 
            {
                grasshopper.position.z = boundY;
            }
        break;
        case STATE_HOP_PREP:

            grasshopper.timer += deltaTime;

            grasshopper.frame = AnimIncrementNoLoop(grasshopper.frame,deltaTime);

            if(grasshopper.timer >= JUMPPREPTIME)
            {
                grasshopper.radians = (DEG2RAD * grasshopper.direction);
                grasshopper.position.y += (JUMPSPEED / 2) * deltaTime; //TODO: Can probably precalculate ahead of time
                grasshopper.upwardVelocity = JUMPSPEED + RandomRange(-6,0.2,deltaTime);
                grasshopper.forwardVelocity = SPEED + RandomRange(0,3,deltaTime);
                grasshopper.frame = ANIMFRAMESTART;
                grasshopper.state = STATE_HOP;
            }
        break;
        case STATE_HOP:
        
            grasshopper.frame = AnimIncrementNoLoop(grasshopper.frame,deltaTime);
            float radians = grasshopper.radians;
            float velocity = grasshopper.forwardVelocity * deltaTime;

            float deltaX = cos(radians) * velocity;
            float deltaZ = sin(radians) * velocity;

            // grasshopper.position += (new float3(Mathf.Cos(radians) * velocity, 0,Mathf.Sin(radians) * velocity));
            grasshopper.position += float3(deltaX, 0, deltaZ);
            grasshopper.forwardVelocity -= deltaTime;
            grasshopper.position.y += grasshopper.upwardVelocity * deltaTime;
            grasshopper.upwardVelocity -= deltaTime * GRAVITY;

            if(grasshopper.position.y <= ground || grasshopper.forwardVelocity <= 0)
            {
                grasshopper.position.y = ground;
                grasshopper.forwardVelocity = 0;
                grasshopper.state = STATE_IDLE;
            }
            for (int bb = 0; bb < bubbleLength; bb++)
            {
                float radius = bubbles[bb].radius;
                if(distance(bubbles[bb].position,grasshopper.position) < radius)
                {
                    grasshopper.bubbleParent = bb;
                    grasshopper.timer = 0;  
                    grasshopper.forwardVelocity = grasshopper.position.x;
                    grasshopper.upwardVelocity = grasshopper.position.y;
                    // grasshopper.jumpWaitTime = grasshopper.position.z;
                    grasshopper.temp = 0;
                    grasshopper.state = STATE_BUBBLECAPTURED;  
                }
            }
            if (grasshopper.position.x < -boundX) 
            {
                // grasshopper.position.x = -boundX;
                grasshopper.radians = grasshopper.radians + 180;
            }
            else if (grasshopper.position.x > boundX) 
            {
                // grasshopper.position.x = boundX;
                grasshopper.radians = grasshopper.radians + 180;
            }
            if (grasshopper.position.z < -boundY) 
            {
                // grasshopper.position.z = -boundY;
                grasshopper.radians = grasshopper.radians + 180;
            }
            else if (grasshopper.position.z > boundY) 
            {
                // grasshopper.position.z = boundY;
                grasshopper.radians = grasshopper.radians + 180;
            }
            // if(grasshopper.temp - ground >= 2)
            // {
            //     grasshopper.radians = grasshopper.radians + 180;
            // }
            grasshopper.temp = ground;
        break;
        case STATE_BUBBLECAPTURED:
            
            float timer = grasshopper.timer + grasshopper.seed;
            int bubbleNum = grasshopper.bubbleParent;
            float bubRadius = bubbles[bubbleNum].radius;
            float3 initialPos = float3(grasshopper.forwardVelocity, grasshopper.upwardVelocity,grasshopper.jumpWaitTime); //Repurpose this variables as they're no longer needed in this state, can be used to remember initial position
            float orbitX = bubbles[bubbleNum].position.x + bubRadius * cos(timer * DEG2RAD);
            // float orbitY = grasshopper.position.y;  // Keep the same height (y-axis)
            float orbitY = bubbles[bubbleNum].position.y;  // Keep the same height (y-axis)
            float orbitZ = bubbles[bubbleNum].position.z + bubRadius * sin(timer * DEG2RAD);

            float3 orbitPos = float3(orbitX,orbitY,orbitZ);
            // float3 finalOrbitPos = orbitPos + bubbles[bubbleNum].delta;
            grasshopper.frame = AnimIncrementLoop(grasshopper.frame,deltaTime);
            grasshopper.temp += deltaTime * 0.4;
            if(grasshopper.temp > 1)
            {
                grasshopper.temp = 1;
            }
            grasshopper.position = lerp(initialPos,orbitPos,EaseOutCubic(grasshopper.temp));
            grasshopper.direction += deltaTime * 90;
            grasshopper.timer += deltaTime * 90;
            
            grasshopper.spinDirection += deltaTime * 60;

            if(grasshopper.position.y < -100)
            {
                grasshopper.bubbleParent = bubbleNum;
                grasshopper.timer = 0;  
                grasshopper.state = STATE_VANQUISHED;  
                grasshopper.position.y = -9999999;
            }
            // if (grasshopper.position.x < -boundX) 
            // {
            //     grasshopper.position.x = -boundX;
            //     // grasshopper.radians = grasshopper.radians + 180;
            // }
            // else if (grasshopper.position.x > boundX) 
            // {
            //     grasshopper.position.x = boundX;
            //     // grasshopper.radians = grasshopper.radians + 180;
            // }
            // if (grasshopper.position.z < -boundY) 
            // {
            //     grasshopper.position.z = -boundY;
            //     // grasshopper.radians = grasshopper.radians + 180;
            // }
            // else if (grasshopper.position.z > boundY) 
            // {
            //     grasshopper.position.z = boundY;
            //     // grasshopper.radians = grasshopper.radians + 180;
            // }
        break;

        case STATE_HEADSCRATCH:
            // grasshopper.color = float3(1,1,1);
            grasshopper.frame = AnimIncrementNoLoop(grasshopper.frame,deltaTime);
            if(grasshopper.frame >= ANIMFRAMEEND)
            {
                grasshopper.timer = 0;
                grasshopper.frame = ANIMFRAMESTART;
                grasshopper.state = STATE_IDLE;
            }
        break;
        case STATE_VANQUISHED:
            // grasshopper.position.y += 10 * deltaTime;
        break;
        default:
            grasshopper.position.y += 10000 * deltaTime;
        break;
    }
    grasshoppers[id.x] = grasshopper;
}
